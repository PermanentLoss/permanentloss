// SPDX-License-Identifier: MIT
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol. SEE BELOW FOR SOURCE. !!
pragma solidity ^0.7.0;
pragma experimental ABIEncoderV2;

import {MarginVault} from "../libs/MarginVault.sol";
import {Actions} from "../libs/Actions.sol";

interface IController {
    event AccountOperatorUpdated(
        address indexed accountOwner,
        address indexed operator,
        bool isSet
    );
    event CallExecuted(
        address indexed from,
        address indexed to,
        address indexed vaultOwner,
        uint256 vaultId,
        bytes data
    );
    event CallRestricted(bool isRestricted);
    event CollateralAssetDeposited(
        address indexed asset,
        address indexed accountOwner,
        address indexed from,
        uint256 vaultId,
        uint256 amount
    );
    event CollateralAssetWithdrawed(
        address indexed asset,
        address indexed AccountOwner,
        address indexed to,
        uint256 vaultId,
        uint256 amount
    );
    event FullPauserUpdated(
        address indexed oldFullPauser,
        address indexed newFullPauser
    );
    event LongOtokenDeposited(
        address indexed otoken,
        address indexed accountOwner,
        address indexed from,
        uint256 vaultId,
        uint256 amount
    );
    event LongOtokenWithdrawed(
        address indexed otoken,
        address indexed AccountOwner,
        address indexed to,
        uint256 vaultId,
        uint256 amount
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event PartialPauserUpdated(
        address indexed oldPartialPauser,
        address indexed newPartialPauser
    );
    event Redeem(
        address indexed otoken,
        address indexed redeemer,
        address indexed receiver,
        address collateralAsset,
        uint256 otokenBurned,
        uint256 payout
    );
    event ShortOtokenBurned(
        address indexed otoken,
        address indexed AccountOwner,
        address indexed from,
        uint256 vaultId,
        uint256 amount
    );
    event ShortOtokenMinted(
        address indexed otoken,
        address indexed AccountOwner,
        address indexed to,
        uint256 vaultId,
        uint256 amount
    );
    event SystemFullyPaused(bool isActive);
    event SystemPartiallyPaused(bool isActive);
    event VaultOpened(address indexed accountOwner, uint256 vaultId);
    event VaultSettled(
        address indexed AccountOwner,
        address indexed to,
        uint256 vaultId,
        uint256 payout
    );

    function addressbook() external view returns (address);

    function calculator() external view returns (address);

    function callRestricted() external view returns (bool);

    function fullPauser() external view returns (address);

    function getAccountVaultCounter(address _accountOwner)
        external
        view
        returns (uint256);

    function getConfiguration()
        external
        view
        returns (
            address,
            address,
            address,
            address
        );

    function getPayout(address _otoken, uint256 _amount)
        external
        view
        returns (uint256);

    function getProceed(address _owner, uint256 _vaultId)
        external
        view
        returns (uint256);

    function getVault(address _owner, uint256 _vaultId)
        external
        view
        returns (MarginVault.Vault memory);

    function hasExpired(address _otoken) external view returns (bool);

    function initialize(address _addressBook, address _owner) external;

    function isOperator(address _owner, address _operator)
        external
        view
        returns (bool);

    function isSettlementAllowed(address _otoken) external view returns (bool);

    function operate(Actions.ActionArgs[] memory _actions) external payable;

    function oracle() external view returns (address);

    function owner() external view returns (address);

    function partialPauser() external view returns (address);

    function pool() external view returns (address);

    function refreshConfiguration() external;

    function renounceOwnership() external;

    function setCallRestriction(bool _isRestricted) external;

    function setFullPauser(address _fullPauser) external;

    function setOperator(address _operator, bool _isOperator) external;

    function setPartialPauser(address _partialPauser) external;

    function setSystemFullyPaused(bool _fullyPaused) external;

    function setSystemPartiallyPaused(bool _partiallyPaused) external;

    function systemFullyPaused() external view returns (bool);

    function systemPartiallyPaused() external view returns (bool);

    function transferOwnership(address newOwner) external;

    function whitelist() external view returns (address);
}
